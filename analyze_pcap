#------------------------------------------------------------------------
#--- analyze_pcap
#---
#--- Usage:  Generate the voice quilty report. 
#---
#--- Issue Notes:
#--- version 2:  20180606 Support to extract the specific fields
#--- version 1:  20180603 Shane Wang developed the base functionalities
#------------------------------------------------------------------------


# Define the help info
help_info="DESCRIPTION:
analyze_pcap will generate the voice quailty report.
  
USAGE:
    analyze_pcap [ -h|--help ]
    analyze_pcap -r|--read <pcap file> [-r|--read] [-s_ip|--source_ip] [-s_port|--source_port] [-d_ip|--destination_ip] [-d_port|--destination_port] [-s|--ssrc] [-p|--payload] [-c|--codec] [-pk|--pkts] [-l|--lost] [-d|--delta] [-max_j|--max_jitter] [-mean_j|--mean_jitter] [-i|--problems] 

extended_usage=
    --help, -h              : Displays command usage.

    --read, -r <pcap file>  : Load a pcap file
    
    --source_ip, -s_ip      : Src IP addr

    --source_port, -s_port      : Port

    --destination_ip, -d_ip     : Dest IP addr

    --destination_port, -d_port : Port

    --ssrc, -s              : SSRC

    --payload, -p           : Payload

    --codec, -c             : Codec

    --pkts, -pk             : Pkts

    --lost, -l              : Lost

    --delta, -d             : Max Delta(ms)

    --max_jitter, -max_j    : Max Jitter(ms)

    --mean_jitter, -mean_j  : Mean Jitter(ms)

    --problems, -i          : Problems

EXAMPLES:
    analyze_pcap --help
    analyze_pcap -r G711.pcap
    analyze_pcap -r G711.pcap --source_ip 10.3.51.11 --source_port 35768 --codec
    analyze_pcap -r G711.pcap --source_ip 10.3.51.11 --source_port 35768 --max_jitter
        
Dependencies:
   apt-get install -y tshark
   yum install wireshark
"

# Check the dependencies
if [[ `which tshark 2>/dev/null` == "" ]]; then {
    echo "No tshark.
   apt-get install -y tshark
   yum install wireshark"
   
   exit
}
fi

# Check the input parameters
gen_full_report="no"
_source_ip=""
_source_port=""
_pcap_file=""
get_destination_ip=""
get_destination_port=""
get_ssrc=""
get_payload=""
get_codec=""
get_pkts=""
get_lost=""
get_delta=""
get_max_jitter=""
get_mean_jitter=""
get_problems=""

if [[ $# -eq 2 ]]; then {
    gen_full_report="yes"
}
fi

while [ $# -gt 0 ]; do {
    case $1 in 
        -r|--read)
            shift
            _pcap_file=$1
            
            # Check whether the pcap file exist or not
            if [[ ! -f $_pcap_file ]]; then {
                echo "$_pcap_file doesn't exist."
                exit
            }
            fi
            
            # Valid the input the pcap file
            suffix=`echo $_pcap_file | awk -F "." '{print $NF}'`
            if [[ $suffix != "pcap" ]]; then {
                echo "The input file must be .pcap file."
                exit
            }
            fi
        ;;
        -s_ip|--source_ip)
            shift
            _source_ip=$1
        ;;
        -s_port|--source_port)
            shift
            _source_port=$1
        ;;
        -d_ip|--destination_ip)            
            get_destination_ip="yes"
        ;;
        -d_port|--destination_port)            
            get_destination_port="yes"
        ;;
        -s|--ssrc)            
            get_ssrc="yes"
        ;;
        -p|--payload)            
            get_payload="yes"
        ;;
        -c|--codec)            
            get_codec="yes"
        ;;
        -pk|--pkts)            
            get_pkts="yes"
        ;;
        -l|--lost)            
            get_lost="yes"
        ;;
        -d|--delta)            
            get_delta="yes"
        ;;
        -max_j|--max_jitter)            
            get_max_jitter="yes"
        ;;
        -mean_j|--mean_jitter)            
            get_mean_jitter="yes"
        ;;
        -i|--problems)            
            get_problems="yes"
        ;;        
        -h|--help)
            echo "${help_info}"
            exit
        ;;
        *)
            echo "Invalid parameter: \"$1\""
            echo
            echo "${help_info}"
            exit
        ;;
    esac
    
    # Get the next parameter
    shift
}
done

# Generate the full report
if [[ $_pcap_file != "" ]]; then {
    _report=`tshark -q -z rtp,streams -o rtp.heuristic_rtp:TRUE -r $_pcap_file 2>/dev/null`
} else {
    echo "Must input the pcap file."
    exit
}
fi

if [[ $gen_full_report == "yes" ]]; then {
    echo "${_report}"
} elif [[ $_source_ip == "" || $_source_port == "" ]]; then {
    echo "If you want to extract the specific fields, you must offer"
    echo "the source IP and the source Port."
    exit
} else {
    echo "${_report}" | gawk \
    -v awk_source_ip="$_source_ip" \
    -v awk_source_port="$_source_port" \
    -v awk_destination_ip="$get_destination_ip" \
    -v awk_destination_port="$get_destination_port" \
    -v awk_ssrc="$get_ssrc" \
    -v awk_payload="$get_payload" \
    -v awk_codec="$get_codec" \
    -v awk_pkts="$get_pkts" \
    -v awk_lost="$get_lost" \
    -v awk_delta="$get_delta" \
    -v awk_max_jitter="$get_max_jitter" \
    -v awk_mean_jitter="$get_mean_jitter" \
    -v awk_problems="$get_problems" \
    '{
        split($0, tmp)
        if (awk_source_ip == tmp[1] && awk_source_port == tmp[2]) {
            if (awk_destination_ip == "yes") {
                print tmp[3]
            }
            
            if (awk_destination_port == "yes") {
                print tmp[4] 
            } 
            
            if (awk_ssrc == "yes") {
                print tmp[5] 
            }
            
            if (awk_payload == "yes") {
                print tmp[7] 
            } 
            
            if (awk_codec == "yes") {
                print tmp[8] 
            } 
            
            if (awk_pkts == "yes") {
                print tmp[9] 
            } 
            
            if (awk_lost == "yes") {
                split(tmp[11], tmp2, "(")
                split(tmp2[2], tmp3, "%")
                print tmp3[1]
            } 
            
            if (awk_delta == "yes") {
                print tmp[12] 
            } 
            
            if (awk_max_jitter == "yes") {
                print tmp[13] 
            } 
            
            if (awk_mean_jitter == "yes") {
                print tmp[14] 
            } 
            
            if (awk_problems == "yes") {
                print tmp[15] 
            }      
        }        
    }'
}
fi

# Reference:
# The example of report of 'tshark -q -z rtp,streams'
# ========================= RTP Streams ========================
# Src IP addr  Port    Dest IP addr  Port       SSRC          Payload  Pkts         Lost   Max Delta(ms)  Max Jitter(ms) Mean Jitter(ms) Problems?
# 10.3.51.11 35768      10.0.32.65 31220 0x00000000 ITU-T G.711 PCMU  1765     0 (0.0%)           20.18            0.04            0.02
# 10.0.32.66 21646      10.3.51.11  6000 0x00000000 ITU-T G.711 PCMU  1490    11 (0.7%)           50.95            5.33            2.02 X
# 10.3.51.11  6000      10.0.32.66 21646 0x00000000 ITU-T G.711 PCMU  1490     0 (0.0%)           50.95            5.33            2.02
# 10.0.32.65 31220      10.3.51.11 35768 0x00000000 ITU-T G.711 PCMU  1478    12 (0.8%)           62.23            6.76            3.28 X
# ==============================================================

